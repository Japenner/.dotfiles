#!/usr/bin/env bash

set -euo pipefail

# ----------------------------#
# Constants & Default Values  #
# ----------------------------#

readonly SCRIPT_NAME="$(basename "$0")"
readonly PROMPT_TEMPLATE_PATH="$DOTFILES/__resources__/prompts/review_pr.md"
readonly CHATGPT_SCRIPT="$DOTFILES/.local/bin/dev/chatgpt"

# Default Arguments
PULL_REQUEST_ID="${1:-}"
MODEL_TYPE="${2:-mini}"

# Dynamic Variables (set by functions)
GITHUB_REPO=""

# ----------------------------#
# Helper Functions            #
# ----------------------------#

show_usage() {
  cat << EOF
Usage: $SCRIPT_NAME <pull-request-id> [model-type]

Arguments:
  <pull-request-id>    The GitHub PR number to review
  [model-type]         Model to use: mini (default), standard, reasoning

Options:
  -h, --help          Show this help message

Examples:
  $SCRIPT_NAME 123
  $SCRIPT_NAME 123 standard
  $SCRIPT_NAME 123 reasoning

Fetches a PR diff from the current repository and sends it to OpenAI for automated code review feedback.
EOF
}

log_info() {
  echo "‚ÑπÔ∏è  $*" >&2
}

log_success() {
  echo "‚úÖ $*" >&2
}

log_error() {
  echo "‚ùå Error: $*" >&2
}

# ----------------------------#
# Validation Functions        #
# ----------------------------#

validate_arguments() {
  case "${PULL_REQUEST_ID:-}" in
    ""|"-h"|"--help")
      show_usage
      exit 0
      ;;
  esac

  if [[ ! "$PULL_REQUEST_ID" =~ ^[0-9]+$ ]]; then
    log_error "Pull request ID must be a number"
    show_usage
    exit 1
  fi
}

validate_dependencies() {
  if ! command -v gh >/dev/null 2>&1; then
    log_error "GitHub CLI (gh) is not installed"
    exit 1
  fi

  if ! gh auth status >/dev/null 2>&1; then
    log_error "Not authenticated with GitHub CLI"
    exit 1
  fi

  if [[ ! -f "$CHATGPT_SCRIPT" ]]; then
    log_error "ChatGPT script not found at $CHATGPT_SCRIPT"
    exit 1
  fi

  if [[ ! -x "$CHATGPT_SCRIPT" ]]; then
    log_error "ChatGPT script is not executable: $CHATGPT_SCRIPT"
    exit 1
  fi

  if [[ ! -f "$PROMPT_TEMPLATE_PATH" ]]; then
    log_error "Prompt template not found at $PROMPT_TEMPLATE_PATH"
    exit 1
  fi
}

validate_git_repository() {
  if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    log_error "Not inside a Git repository"
    exit 1
  fi
}

# ----------------------------#
# Repository Functions        #
# ----------------------------#

get_github_repository() {
  log_info "Detecting GitHub repository..."

  local remote_url
  remote_url=$(git config --get remote.origin.url)

  if [[ -z "$remote_url" ]]; then
    log_error "No origin remote found"
    exit 1
  fi

  # Convert SSH/HTTPS URLs to owner/repo format
  local repo
  if [[ "$remote_url" =~ git@github\.com:([^/]+)/(.+)\.git$ ]]; then
    # SSH format: git@github.com:owner/repo.git
    repo="${BASH_REMATCH[1]}/${BASH_REMATCH[2]}"
  elif [[ "$remote_url" =~ https://github\.com/([^/]+)/(.+)\.git$ ]]; then
    # HTTPS format: https://github.com/owner/repo.git
    repo="${BASH_REMATCH[1]}/${BASH_REMATCH[2]}"
  elif [[ "$remote_url" =~ github\.com[:/]([^/]+)/(.+)$ ]]; then
    # Generic format without .git suffix
    repo="${BASH_REMATCH[1]}/${BASH_REMATCH[2]%.git}"
  else
    log_error "Could not parse GitHub repository from remote URL: $remote_url"
    exit 1
  fi

  GITHUB_REPO="$repo"
  log_success "Using repository: $GITHUB_REPO"
}

# ----------------------------#
# PR Functions                #
# ----------------------------#

fetch_pr_diff() {
  log_info "Fetching PR diff for #$PULL_REQUEST_ID from $GITHUB_REPO..."

  local diff
  diff=$(gh pr diff "$PULL_REQUEST_ID" --repo "$GITHUB_REPO")

  if [[ -z "$diff" ]]; then
    log_error "Failed to retrieve PR diff"
    exit 1
  fi

  echo "$diff"
}

# ----------------------------#
# Prompt Functions            #
# ----------------------------#

create_review_prompt() {
  local diff="$1"
  local template

  if [[ ! -r "$PROMPT_TEMPLATE_PATH" ]]; then
    log_error "Cannot read prompt template at $PROMPT_TEMPLATE_PATH"
    exit 1
  fi

  template=$(cat "$PROMPT_TEMPLATE_PATH")

  # Replace $DIFF placeholder with actual diff content
  echo "${template//\$DIFF/$diff}"
}

# ----------------------------#
# Main Execution              #
# ----------------------------#

main() {
  # Validate everything
  validate_arguments
  validate_git_repository
  get_github_repository
  validate_dependencies

  # Fetch PR diff
  log_info "Fetching PR diff..."
  local diff
  diff=$(fetch_pr_diff)

  # Create the review prompt
  log_info "Preparing review prompt..."
  local prompt
  prompt=$(create_review_prompt "$diff")

  # Create temporary file for the prompt
  local temp_prompt_file
  temp_prompt_file=$(mktemp)
  trap "rm -f '$temp_prompt_file'" EXIT

  echo "$prompt" > "$temp_prompt_file"

  # Use the chatgpt script to get the review
  log_info "Sending to ChatGPT for review..."
  echo ""
  echo "üìù AI Code Review Feedback:"
  echo "=========================="

  "$CHATGPT_SCRIPT" "$temp_prompt_file" "$MODEL_TYPE"

  log_success "Review completed!"
}

# ----------------------------#
# Script Execution            #
# ----------------------------#

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
