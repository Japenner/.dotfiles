#!/usr/bin/env zsh

# ======================== Automation ======================== #

bin_path="${DOTFILES}/.local/bin"

alias branch="branch"                       # Create a new branch and update GH ticket
alias chatgpt="chatgpt"                     # Send a prompt or file to OpenAI and get a response
# alias cht="${DOTFILES}/tmux/tmux-cht"     # Run tmux cheat sheet script
# alias slack:away="set_slack_status set"   # Set Slack status to away
# alias slack:back="set_slack_status clear" # Set Slack status to back

# ======================= Config Editing ====================== #

alias e:als='$CODE_EDITOR "$DOTFILES/zsh/.aliases"'                # Open aliases config in editor
alias e:als:local='$CODE_EDITOR "$DOTFILES/zsh/local/aliases.zsh"' # Open local aliases config in editor
alias e:df='$CODE_EDITOR "$DOTFILES"'                              # Open dotfiles in the code editor
alias e:env:local='$CODE_EDITOR "$DOTFILES/zsh/local/env.zsh"'     # Open local environment variables in editor
alias e:ohmyzsh='$CODE_EDITOR "$HOME/.oh-my-zsh"'                  # Edit Oh My Zsh config
alias e:starship='$CODE_EDITOR "$DOTFILES/starship/starship.toml"' # Edit Starship config
alias e:tb='$CODE_EDITOR "$TOOLBOX"'                               # Open toolbox in the code editor
alias e:zshrc='$CODE_EDITOR "$HOME/.zshrc"'                        # Edit .zshrc file

# ========================== Docker =========================== #

alias d:build="docker_build"                         # Build a Docker image from a Dockerfile and tag it with a name
alias d:clean:images="docker_clean_dangling_images"  # Remove dangling Docker images
alias d:disk="docker_disk_usage"                     # Display Docker disk usage statistics
alias d:exec="docker_exec"                           # Run an interactive command inside a Docker container
alias d:images="docker_images"                       # Show all Docker images in a readable format
alias d:inspect="docker_inspect"                     # Inspect a Docker container by name or ID
alias d:kill="docker_kill_all"                       # Kill all running Docker containers
alias d:load="docker_load"                           # Load a Docker image from a file
alias d:logs="docker_logs"                           # Stream logs from a Docker container
alias d:prune="docker_prune_all"                     # Remove all unused containers, networks, images, and volumes
alias d:pull="docker_pull_latest"                    # Pull the latest version of a Docker image
alias d:restart="docker_restart"                     # Restart Docker Desktop on macOS
alias d:restart:container="docker_restart_container" # Restart a specific Docker container
alias d:rm:stopped="docker_rm_stopped"               # Remove all stopped Docker containers
alias d:save="docker_save"                           # Save a Docker image to a file
alias d:shell="docker_shell"                         # Attach to a running Docker container with a shell
alias d:wipe="docker_wipe"                           # Stop and remove all Docker containers, images, and dangling volumes.
alias lzd="lazydocker"                               # Open Lazydocker for managing Docker containers

# ========================== Dotfiles ========================= #

alias df:cleanup="cleanup.zsh"                        # Clean up dotfiles
alias df:commit="commit_dot_files"                    # Commit and forcefully push changes in dotfiles
alias df:pull="git -C $DOTFILES pull"                 # Pull latest changes in dotfiles
alias df:refresh="refresh.zsh"                        # Refresh dotfiles
alias df:reload="source $HOME/.zshrc"                 # Reload .zshrc configuration
alias df:setup="setup.zsh"                            # Set up dotfiles environment
alias df:update="git_update_current_branch $DOTFILES" # Update dotfiles current branch

# ============================ Git ============================ #

alias g:ac="generate-commit-message -a -s"                                             # Silently generate and apply a commit message using AI
alias g:auth:team="eval ${ssh-agent -s} && ssh-add $HOME/.ssh/id_ed25519_adhocteam_us" # Authenticate with the team SSH key
alias g:auth="eval ${ssh-agent -s} && ssh-add $HOME/.ssh/id_ed25519_personal"          # Authenticate with the personal SSH key
alias g:base='gco "$(g:default)" && git pull'                                          # Checkout the default branch and pull changes
alias g:clwt="clone-to-worktree"                                                       # Clone a git repository into a worktree
alias g:cw="create-worktree"                                                           # Create a new git worktree
alias g:cwall="clone-all-repos"                                                        # Clone all repositories
alias g:default="git_default_branch"                                                   # Get the default branch of the remote repository
alias g:find:branch="gb -a | grep -i"                                                  # Find a branch by name
alias g:prune="git_prune_local_branches"                                               # Prune local branches that have been deleted on the remote
alias g:rb='git fetch origin && git rebase origin/"$(g:default)"'                      # Stash changes, rebase with default branch, and reapply stash
alias g:repo="github_user_repo"                                                        # Get the user/repo of the remote repository
alias g:rs:file='gco "$(g:default)" --'                                                # Revert a file to the state of the default branch
alias g:rs='git reset origin/"$(g:default)"'                                           # Reset to the state of the remote default branch
alias g:undo="git reset --soft HEAD~1"                                                 # Undo the last commit, keeping changes in the working directory
alias g:update="git stash -u && g:rb && git push -f"                                   # Rebase with default branch and force push
alias g:wip="git_commit_wip"                                                           # Commit all changes under a 'WIP' message without verification
alias g:yolo="git push origin master --force --no-verify"                              # Force push changes to master without verification

# =========================== GitHub ========================== #

alias gh:cdiff="github_copy_diff"                    # Copy the diff of the current pull request to clipboard
alias gh:commit="git_force_commit_changes"           # Commit and forcefully push changes in directory
alias gh:compare="github_compare_current_branch"     # Open GitHub compare page for the current branch
alias gh:open="github_open_current_repo"             # Open GitHub repository in browser
alias gh:pr-review="generate-pr-review"              # Run script to review pull requests
# alias gh:pr="ruby generate_pr.rb"                  # Run script to create a new pull request based on work
alias gh:publish='"$(gh:commit)" && "$(gh:compare)"' # Add and commit all changes, push to repo, and open GitHub compare page
alias gh:rr="open-pr-review-requests"                # Open pull requests where a review is requested
alias gh:update-all="update-all-repos"               # Run script to update all git repositories

# ============================ Java =========================== #

alias java:rs="docker container prune &&\
  docker image prune &&\
  mvn clean package -DskipTests &&\
  docker-compose up --build service" # Clean Docker, build, and start service

# ========================= JavaScript ======================== #

alias npm:clean="rm -rf node_modules && npm cache clean && npm install"    # Clean and reinstall npm packages
alias yarn:clean="rm -rf node_modules && yarn cache clean && yarn install" # Clean and reinstall Yarn packages

# ============================ MacOS ========================== #

alias brew:dump="generate_brewfile_backup" # Generate a new Brewfile backup

# ========================= Navigation ======================== #

alias nv:a="cd $PERSONAL_REPOS/ansible" # Navigate to ansible directory
alias nv:df="cd $DOTFILES"              # Navigate to dotfiles directory
alias nv:r="cd $REPOS"                  # Navigate to repos directory
alias nv:p="cd $PERSONAL_REPOS"         # Navigate to personal repos directory
alias nv:w="cd $WORK_REPOS"             # Navigate to work repos directory
alias nv:tb="cd $TOOLBOX"               # Navigate to toolbox directory

# ======================== Productivity ======================= #

alias c="clear"                           # Clear terminal screen
alias serve="python3 -m http.server 8000" # Start Python HTTP server
alias todo="$CODE_EDITOR $HOME/.todo"     # Open todo file in editor

# =========================== Rails =========================== #

alias r:bundle="ruby_install_dependencies"            # Install dependencies
alias r:check="ruby_run_code_quality_checks"          # Install dependencies, run rubocop, and run rspec
alias r:console="rails_start_console"                 # Rails console for given environment
alias r:db:reset="rails_reset_database"               # Reset database, load schema, and seed data for given environment
alias r:fix:cops="with_stash ruby_fix_rubocop_issues" # Fix Rubocop issues by stashing changes, fixing issues, and restoring the stash
alias r:foreman="ruby_start_foreman"                  # Start Foreman with bin/foreman
alias r:ls="lsof -wni tcp:3000"                       # List services on port 3000
alias r:migrate="rails_run_migrations"                # Run pending migrations
alias r:server="start_rails_server"                   # Start Rails server
alias r:spec="run_specs"                              # Run RSpec test for given directory or file
alias r:specs="rails_run_rspec_tests"                 # Run RSpec tests
alias r:tests="rails_run_tests"                       # Run Minitest tests

# ========================== Utility ========================== #

alias awsume=". awsume"                                                   # Source awsume to assume AWS roles easily
alias chrome="open_chrome"                                                # Open Google Chrome
alias cpwd="pwd | pbcopy"                                                 # Copy current working directory to clipboard
alias gem:edit="ruby_edit_gem"                                            # Open a gem in the editor
alias nato="print_nato_alphabet"                                          # Display NATO phonetic alphabet
alias path='echo $PATH | tr -s ":" "\n"'                                  # Display PATH directories, each on a new line
alias pp="python -m json.tool"                                            # Pretty-print JSON using Python’s JSON tool
alias toolbox="BUNDLE_GEMFILE=${HOME}/Gemfile.global bundle exec toolbox" # Run Toolbox with global Gemfile
alias tools:check="check_modern_tools"                                    # Check if modern tools are installed
alias tools:install="install_modern_tools"                                # Install modern tools if not already installed
alias tools:install:cargo="cargo_install_modern_tools"                    # Install modern tools using Cargo

# ============================ Unix =========================== #

alias ....="up ...."      # Go up three directories
alias ...="up ..."        # Go up two directories
alias ..="up .."          # Go up one directory
alias ~="cd ~"            # Go to home directory
alias e="$EDITOR"         # Open editor
alias edit="$CODE_EDITOR" # Use edit command to open files in VS Code
alias la="ls -lha"        # List all files in detailed format
alias ll="ls -al"         # List files in detail
alias ln="ln -v"          # Verbose link creation
alias mkdir="mkdir -p"    # Create directories, including parents
alias v="$VISUAL"         # Open visual editor
alias vim="nvim"          # Use vim command to open Neovim

# =========================== VS Code ========================= #

alias code:backup="code:backup:extensions && code:backup:settings"                                  # Backup VS Code extensions and settings
alias code:backup:extensions="$CODE_EDITOR --list-extensions > $DOTFILES/vscode/extension-list.txt" # Backup VS Code extensions
alias code:backup:settings='cat "$(find_vscode_settings)" > "$DOTFILES"/vscode/settings.json'       # Backup VS Code settings
